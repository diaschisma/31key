use cgmath::{Vector3, Rad, Deg};

macro_rules! rgb {
    ($r:expr, $g:expr, $b:expr) => {
        Vector3 {
            x: $r as f32 / 255.0,
            y: $g as f32 / 255.0,
            z: $b as f32 / 255.0
        }
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct Layout {
    pub angle: Rad<f32>,
    pub q_steps: i32,
    pub r_steps: i32,
    pub colors: Vec<Vector3<f32>>,
}

#[derive(Deserialize)]
enum Angle {
    Degrees(f32),
    Radians(f32),
}

impl From<Angle> for Rad<f32> {
    fn from(source: Angle) -> Self {
        match source {
            Angle::Degrees(deg) =>
                Deg(deg).into(),
            Angle::Radians(rad) =>
                Rad(rad),
        }
    }
}

#[derive(Deserialize)]
pub struct LayoutConfig {
    angle: Angle,
    q_steps: i32,
    r_steps: i32,
    colors: Vec<[u8; 3]>
}

impl From<LayoutConfig> for Layout {
    fn from(source: LayoutConfig) -> Self {
        let angle = source.angle.into();
        let (q_steps, r_steps) = (source.q_steps, source.r_steps);
        let colors = source.colors.iter().map(|c| rgb!(c[0], c[1], c[2])).collect();

        Layout {
            angle,
            q_steps, r_steps,
            colors
        }
    }
}

pub fn edo31_layout() -> Layout {
    Layout {
        angle: Deg(16.102113752).into(),
        q_steps: 5,
        r_steps: 3,
        colors: vec![
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xff, 0x9f, 0x41),
            rgb!(0xcf, 0xcf, 0xcf),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0x7b, 0x7b, 0x7b),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xff, 0x9f, 0x41),
            rgb!(0xcf, 0xcf, 0xcf),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0x7b, 0x7b, 0x7b),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0xcf, 0xcf, 0xcf),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xff, 0x9f, 0x41),
            rgb!(0xcf, 0xcf, 0xcf),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0x7b, 0x7b, 0x7b),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xff, 0x9f, 0x41),
            rgb!(0xcf, 0xcf, 0xcf),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0x7b, 0x7b, 0x7b),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xff, 0x9f, 0x41),
            rgb!(0xcf, 0xcf, 0xcf),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0x7b, 0x7b, 0x7b),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xbb, 0xaa, 0x93),
            rgb!(0xcf, 0xcf, 0xcf),
        ],
    }
}

pub fn edo12_layout() -> Layout {
    Layout {
        angle: Deg(16.102113752).into(),
        q_steps: 2,
        r_steps: 1,
        colors: vec![
            rgb!(0xef, 0xef, 0xef),
            rgb!(0x4b, 0x4b, 0x4b),
            rgb!(0xef, 0xef, 0xef),
            rgb!(0x4b, 0x4b, 0x4b),
            rgb!(0xef, 0xef, 0xef),
            rgb!(0xef, 0xef, 0xef),
            rgb!(0x4b, 0x4b, 0x4b),
            rgb!(0xef, 0xef, 0xef),
            rgb!(0x4b, 0x4b, 0x4b),
            rgb!(0xef, 0xef, 0xef),
            rgb!(0x4b, 0x4b, 0x4b),
            rgb!(0xef, 0xef, 0xef),
        ],
    }
}

pub fn edo53_layout() -> Layout {
    Layout {
        angle: Deg(-16.102113752).into(),
        q_steps: 9,
        r_steps: 5,
        colors: vec![
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0x87, 0x87, 0x87),
            rgb!(0xff, 0x9f, 0x40),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
            rgb!(0xff, 0xff, 0xff),
            rgb!(0xc3, 0xb7, 0xab),
            rgb!(0xe7, 0xe7, 0xe7),
            rgb!(0xab, 0xb7, 0xc3),
        ],
    }
}